Q2. Describe the categorization of operators in JavaScript based on their functionality. Provide examples for
each category.
->

Operators in JavaScript can be categorized based on their functionality into several distinct groups. Each category serves a specific purpose and provides essential tools for manipulating data and controlling the flow of programs. Here are the primary categories with examples for each:

### 1. Arithmetic Operators
These operators perform mathematical operations.

- **Addition (`+`):** Adds two operands.
  ```javascript
  let sum = 5 + 3; // 8
  ```

- **Subtraction (`-`):** Subtracts the right operand from the left operand.
  ```javascript
  let difference = 10 - 4; // 6
  ```

- **Multiplication (`*`):** Multiplies two operands.
  ```javascript
  let product = 6 * 7; // 42
  ```

- **Division (`/`):** Divides the left operand by the right operand.
  ```javascript
  let quotient = 20 / 4; // 5
  ```

- **Modulus (`%`):** Returns the remainder of a division operation.
  ```javascript
  let remainder = 10 % 3; // 1
  ```

- **Increment (`++`):** Increases an integer value by one.
  ```javascript
  let x = 5;
  x++; // 6
  ```

- **Decrement (`--`):** Decreases an integer value by one.
  ```javascript
  let y = 5;
  y--; // 4
  ```

### 2. Assignment Operators
These operators assign values to variables.

- **Assignment (`=`):** Assigns a value to a variable.
  ```javascript
  let a = 10;
  ```

- **Addition assignment (`+=`):** Adds and assigns a value.
  ```javascript
  let b = 5;
  b += 3; // b = 8
  ```

- **Subtraction assignment (`-=`):** Subtracts and assigns a value.
  ```javascript
  let c = 10;
  c -= 4; // c = 6
  ```

- **Multiplication assignment (`*=`):** Multiplies and assigns a value.
  ```javascript
  let d = 6;
  d *= 2; // d = 12
  ```

- **Division assignment (`/=`):** Divides and assigns a value.
  ```javascript
  let e = 20;
  e /= 4; // e = 5
  ```

- **Modulus assignment (`%=`):** Calculates modulus and assigns a value.
  ```javascript
  let f = 10;
  f %= 3; // f = 1
  ```

### 3. Comparison Operators
These operators compare two values and return a Boolean result.

- **Equal (`==`):** Compares two values for equality (type coercion may occur).
  ```javascript
  let isEqual = (5 == '5'); // true
  ```

- **Not equal (`!=`):** Compares two values for inequality.
  ```javascript
  let isNotEqual = (5 != '5'); // false
  ```

- **Strict equal (`===`):** Compares two values for equality without type coercion.
  ```javascript
  let isStrictEqual = (5 === '5'); // false
  ```

- **Strict not equal (`!==`):** Compares two values for inequality without type coercion.
  ```javascript
  let isStrictNotEqual = (5 !== '5'); // true
  ```

- **Greater than (`>`):** Checks if the left operand is greater than the right operand.
  ```javascript
  let isGreater = (10 > 5); // true
  ```

- **Less than (`<`):** Checks if the left operand is less than the right operand.
  ```javascript
  let isLess = (5 < 10); // true
  ```

- **Greater than or equal to (`>=`):** Checks if the left operand is greater than or equal to the right operand.
  ```javascript
  let isGreaterOrEqual = (10 >= 10); // true
  ```

- **Less than or equal to (`<=`):** Checks if the left operand is less than or equal to the right operand.
  ```javascript
  let isLessOrEqual = (5 <= 5); // true
  ```

### 4. Logical Operators
These operators are used to combine conditional statements.

- **Logical AND (`&&`):** Returns true if both operands are true.
  ```javascript
  let andResult = (true && false); // false
  ```

- **Logical OR (`||`):** Returns true if at least one operand is true.
  ```javascript
  let orResult = (true || false); // true
  ```

- **Logical NOT (`!`):** Inverts the truth value of an operand.
  ```javascript
  let notResult = (!true); // false
  ```

### 5. Bitwise Operators
These operators perform operations on binary representations of integers.

- **Bitwise AND (`&`):** Returns a 1 in each bit position for which both corresponding bits are 1.
  ```javascript
  let bitwiseAnd = (5 & 3); // 1 (0101 & 0011 = 0001)
  ```

- **Bitwise OR (`|`):** Returns a 1 in each bit position for which either corresponding bit is 1.
  ```javascript
  let bitwiseOr = (5 | 3); // 7 (0101 | 0011 = 0111)
  ```

- **Bitwise XOR (`^`):** Returns a 1 in each bit position for which one but not both corresponding bits are 1.
  ```javascript
  let bitwiseXor = (5 ^ 3); // 6 (0101 ^ 0011 = 0110)
  ```

- **Bitwise NOT (`~`):** Inverts all the bits of an operand.
  ```javascript
  let bitwiseNot = (~5); // -6 (bitwise complement of 5)
  ```

- **Left shift (`<<`):** Shifts bits to the left by the specified number of positions.
  ```javascript
  let leftShift = (5 << 1); // 10 (0101 << 1 = 1010)
  ```

- **Right shift (`>>`):** Shifts bits to the right by the specified number of positions.
  ```javascript
  let rightShift = (5 >> 1); // 2 (0101 >> 1 = 0010)
  ```

### 6. String Operators
These operators are used to concatenate strings.

- **Concatenation (`+`):** Joins two or more strings.
  ```javascript
  let greeting = "Hello, " + "world!"; // "Hello, world!"
  ```

### 7. Conditional (Ternary) Operator
This operator is a shorthand for `if-else` statements.

- **Syntax:** `condition ? expressionIfTrue : expressionIfFalse`
  ```javascript
  let age = 18;
  let canVote = (age >= 18) ? "Yes" : "No"; // "Yes"
  ```

### 8. Type Operators
These operators are used to determine or convert data types.

- **`typeof`:** Returns the type of a variable.
  ```javascript
  let type = typeof 42; // "number"
  ```

- **`instanceof`:** Checks if an object is an instance of a specific class or constructor.
  ```javascript
  let isInstance = (new Date() instanceof Date); // true
  ```

These categories and examples illustrate how operators are used to perform various tasks in JavaScript, making them a fundamental part of programming in the language.